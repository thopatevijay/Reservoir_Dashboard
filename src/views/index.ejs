<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>

    <style>
      
        body {
      background: #fff;
    }
    
    #wrap {
      /* margin: 45px auto; */
      margin-top: 10px;
      max-width: 800px;
      position: relative;
    }
    
    .chart-box {
      padding-left: 0;
    }
    
    #chart-damList,
    #chart-weekly {
      width: 96%;
      max-width: 48%;
      box-shadow: none;
      padding-left: 0;
      padding-top: 20px;
      background: #fff;
      border: 1px solid #ddd;
    }
    
    #chart-damList {
      float: left;
      position: relative;
      transition: 1s ease transform;
      z-index: 3;
    }
    
    #chart-damList.chart-weekly-activated {
      transform: translateX(0);
      transition: 1s ease transform;
    }
    
    #chart-weekly {
      float: left;
      position: relative;
      z-index: -2;
      transition: 1s ease transform;
    }
    
    #chart-weekly.active {
      transition: 1.1s ease-in-out transform;
      transform: translateX(0);
      z-index: 1;
    }
    
    @media screen and (min-width: 480px) {
      #chart-damList {
        transform: translateX(50%);
      }
      #chart-weekly {
        transform: translateX(-50%);
      }
    }
    
    select#model {
      display: none;
      position: absolute;
      top: -40px;
      left: 0;
      z-index: 2;
      cursor: pointer;
      transform: scale(0.8);

      
    }

    #rainfallchart {
    max-width: 650px;
    margin: 35px auto;
  }
  .apexcharts-tooltip-title {
    display: none;
  }
  #rainfallchart .apexcharts-tooltip {
    display: flex;
    border: 0;
    box-shadow: none;
  }
  </style>


<!-- Dam List Chart -->
<script>
    
let colors = ['#008FFB', '#00E396', '#FEB019', '#FF4560', '#775DD0', '#00D9E9', '#FF66C3','#008FFB', '#00E396', '#FEB019',
 '#FF4560', '#775DD0', '#00D9E9', '#FF66C3','#008FFB', '#00E396', '#FEB019', '#FF4560', '#775DD0',];
  
let presentWaterLevel = [[[],[]],[[],[]],[[],[]],[[],[]],[[],[]],[[],[]],[[],[]],[[],[]],[[],[]],[[],[]],[[],[]],
                 [[],[]],[[],[]],[[],[]],[[],[]],[[],[]],[[],[]],[[],[]],[[],[]]];

// Accessing data from the server side
'<%for(let item of allData[0]){%>'
presentWaterLevel[0][0].push(parseFloat('<%=item%>'))
'<%}%>'
'<%for(let item of allDates[0]){%>'
presentWaterLevel[0][1].push('<%=item%>')
'<%}%>'

'<%for(let item of allData[1]){%>'
presentWaterLevel[1][0].push(parseFloat('<%=item%>'))
'<%}%>'
'<%for(let item of allDates[1]){%>'
presentWaterLevel[1][1].push('<%=item%>')
'<%}%>'

'<%for(let item of allData[2]){%>'
presentWaterLevel[2][0].push(parseFloat('<%=item%>'))
'<%}%>'
'<%for(let item of allDates[2]){%>'
presentWaterLevel[2][1].push('<%=item%>')
'<%}%>'

'<%for(let item of allData[3]){%>'
presentWaterLevel[3][0].push(parseFloat('<%=item%>'))
'<%}%>'
'<%for(let item of allDates[3]){%>'
presentWaterLevel[3][1].push('<%=item%>')
'<%}%>'

'<%for(let item of allData[4]){%>'
presentWaterLevel[4][0].push(parseFloat('<%=item%>'))
'<%}%>'
'<%for(let item of allDates[4]){%>'
presentWaterLevel[4][1].push('<%=item%>')
'<%}%>'

'<%for(let item of allData[5]){%>'
presentWaterLevel[5][0].push(parseFloat('<%=item%>'))
'<%}%>'
'<%for(let item of allDates[5]){%>'
presentWaterLevel[5][1].push('<%=item%>')
'<%}%>'

'<%for(let item of allData[6]){%>'
presentWaterLevel[6][0].push(parseFloat('<%=item%>'))
'<%}%>'
'<%for(let item of allDates[6]){%>'
presentWaterLevel[6][1].push('<%=item%>')
'<%}%>'

'<%for(let item of allData[7]){%>'
presentWaterLevel[7][0].push(parseFloat('<%=item%>'))
'<%}%>'
'<%for(let item of allDates[7]){%>'
presentWaterLevel[7][1].push('<%=item%>')
'<%}%>'

'<%for(let item of allData[8]){%>'
presentWaterLevel[8][0].push(parseFloat('<%=item%>'))
'<%}%>'
'<%for(let item of allDates[8]){%>'
presentWaterLevel[8][1].push('<%=item%>')
'<%}%>'

'<%for(let item of allData[9]){%>'
presentWaterLevel[9][0].push(parseFloat('<%=item%>'))
'<%}%>'
'<%for(let item of allDates[9]){%>'
presentWaterLevel[9][1].push('<%=item%>')
'<%}%>'

'<%for(let item of allData[10]){%>'
presentWaterLevel[10][0].push(parseFloat('<%=item%>'))
'<%}%>'
'<%for(let item of allDates[10]){%>'
presentWaterLevel[10][1].push('<%=item%>')
'<%}%>'

'<%for(let item of allData[11]){%>'
presentWaterLevel[11][0].push(parseFloat('<%=item%>'))
'<%}%>'
'<%for(let item of allDates[11]){%>'
presentWaterLevel[11][1].push('<%=item%>')
'<%}%>'

'<%for(let item of allData[12]){%>'
presentWaterLevel[12][0].push(parseFloat('<%=item%>'))
'<%}%>'
'<%for(let item of allDates[12]){%>'
presentWaterLevel[12][1].push('<%=item%>')
'<%}%>'

'<%for(let item of allData[13]){%>'
presentWaterLevel[13][0].push(parseFloat('<%=item%>'))
'<%}%>'
'<%for(let item of allDates[13]){%>'
presentWaterLevel[13][1].push('<%=item%>')
'<%}%>'

'<%for(let item of allData[14]){%>'
presentWaterLevel[14][0].push(parseFloat('<%=item%>'))
'<%}%>'
'<%for(let item of allDates[14]){%>'
presentWaterLevel[14][1].push('<%=item%>')
'<%}%>'

'<%for(let item of allData[15]){%>'
presentWaterLevel[15][0].push(parseFloat('<%=item%>'))
'<%}%>'
'<%for(let item of allDates[15]){%>'
presentWaterLevel[15][1].push('<%=item%>')
'<%}%>'

'<%for(let item of allData[16]){%>'
presentWaterLevel[16][0].push(parseFloat('<%=item%>'))
'<%}%>'
'<%for(let item of allDates[16]){%>'
presentWaterLevel[16][1].push('<%=item%>')
'<%}%>'

'<%for(let item of allData[17]){%>'
presentWaterLevel[17][0].push(parseFloat('<%=item%>'))
'<%}%>'
'<%for(let item of allDates[17]){%>'
presentWaterLevel[17][1].push('<%=item%>')
'<%}%>'

'<%for(let item of allData[18]){%>'
presentWaterLevel[18][0].push(parseFloat('<%=item%>'))
'<%}%>'
'<%for(let item of allDates[18]){%>'
presentWaterLevel[18][1].push('<%=item%>')
'<%}%>'

let arrayData = [];
for(let i=0;i<presentWaterLevel.length;i++){
        arrayData[i] = [{
            y:250,
            weekDays:[{
                x: presentWaterLevel[i][1][0],
                y: presentWaterLevel[i][0][0]
            },{
                x: presentWaterLevel[i][1][1],
                y: presentWaterLevel[i][0][1]
            },{
                x: presentWaterLevel[i][1][2],
                y: presentWaterLevel[i][0][2]
            },{
                x: presentWaterLevel[i][1][3],
                y: presentWaterLevel[i][0][3]
            },{
                x: presentWaterLevel[i][1][4],
                y: presentWaterLevel[i][0][4]
            }]
        }]
}

// console.log(arrayData)

let damNames = ['Chimoni Dam','Chulliyar Dam','Kallada Dam','Kanjirapuzha Dam','Karapuzha Dam','Kuttiady Dam',
                'Malampuzha Dam','Malankara Dam','Mangalam Dam','Meenkara Dam','Neyyar Dam','Pamba Dam','Pazhassi Dam',
                'Peechi Dam','Periyar Dam','Pothundy Dam','Siruvani Dam','Vazhani Dam','Walayar Dam'];

// making data for chart
function makeData(){
    let dataSet = [];
    let damListSeries = [];
    dataSet = arrayData;

    for(let i=0;i<dataSet.length;i++){

        damListSeries[i] = {
            x: damNames[i],
            y: dataSet[i][0].y, 
            color : colors[i],
            weekDays : dataSet[i][0].weekDays
        }
    }
    console.log(dataSet)
    console.log(damListSeries)

    return damListSeries
    }


    
    function updateWeeklyChart(sourceChart, destChartIDToUpdate) {
      let series = [];
      let seriesIndex = 0;
      let colors = []
    
      if (sourceChart.w.globals.selectedDataPoints[0]) {
        let selectedPoints = sourceChart.w.globals.selectedDataPoints;
        for (let i = 0; i < selectedPoints[seriesIndex].length; i++) {
          let selectedIndex = selectedPoints[seriesIndex][i];
          let listSeries = sourceChart.w.config.series[seriesIndex];
          series.push({
            name: listSeries.data[selectedIndex].x,
            data: listSeries.data[selectedIndex].weekDays
          })
          colors.push(listSeries.data[selectedIndex].color)
        }
    
        if (series.length === 0) series = [{
          data: []
        }]
    
        return ApexCharts.exec(destChartIDToUpdate, 'updateOptions', {
          series: series,
          colors: colors,
          fill: {
            colors: colors
          }
        })
      }
    }
    </script>
  


  <!-- Html  -->
</head>
<body>

 <div class="container" style="padding: 10px 50px 50px 50px;">
  <div class="row ">
    <div class="col-sm-8" >
        <div id="wrap">
            <!-- Displaying First Chart : Dam List -->
            <div id="chart-damList"></div>
            <div id="chart-weekly"></div>
        </div>
    </div>
    <div class="col-sm" style="padding: 200px 50px 50px 0px;">
      <p>Dam Reservoir Dashboard</p>
      <blockquote>Data Source : http://idrb.kerala.gov.in/idrb/irrigation_html_disp/reservoir.html.</blockquote>
      <a href="#FRLMWLchart">FRL & MWL</a> <br>

    </div>
  </div>
 </div>

 <div class="container">
    <div class="row">
      <div class="col-sm" style="padding: 50px 50px 50px 50px;">
        <div id="FRLMWLchart"></div>
      </div>
    </div>
   </div>
  

 




<!-- Dam list chart -->
<script>
     let  options = {
          series: [{
          data: makeData()
        }],
          chart: {
          id: 'barYear',
          height: 600,
          width: '100%',
          type: 'bar',
          events: {
            dataPointSelection: function (e, chart, opts) {
              let weeklyChartEL = document.querySelector("#chart-weekly");
              let damListChartEL = document.querySelector("#chart-damList");
        
              if (opts.selectedDataPoints[0].length === 1) {
                if (weeklyChartEL.classList.contains("active")) {
                  updateWeeklyChart(chart, 'barDays')
                } else {
                  damListChartEL.classList.add("chart-weekly-activated")
                  weeklyChartEL.classList.add("active");
                  updateWeeklyChart(chart, 'barDays')
                }
              } else {
                updateWeeklyChart(chart, 'barDays')
              }
        
              if (opts.selectedDataPoints[0].length === 0) {
                damListChartEL.classList.remove("chart-weekly-activated")
                weeklyChartEL.classList.remove("active");
              }
        
            },
            updated:  function (chart) {
              updateWeeklyChart(chart, 'barDays')
            }
          }
        },
        plotOptions: {
          bar: {
            distributed: true,
            horizontal: true,
            barHeight: '75%',
            dataLabels: {
              position: 'bottom'
            }
          }
        },
        dataLabels: {
          enabled: true,
          textAnchor: 'start',
          style: {
            colors: ['#fff']
          },
          formatter: function (val, opt) {
            return opt.w.globals.labels[opt.dataPointIndex]
          },
          offsetX: 0,
          dropShadow: {
            enabled: true
          }
        },
        
        colors: colors,
        
        states: {
          normal: {
            filter: {
              type: 'desaturate'
            }
          },
          active: {
            allowMultipleDataPointsSelection: true,
            filter: {
              type: 'darken',
              value: 1
            }
          }
        },
        tooltip: {
          shared:false,
          x: {
            show: false
          },
          y: {
            title: {
              formatter: function (val, opts) {
                return opts.w.globals.labels[opts.dataPointIndex]
              }
            }
          }
        },
        legend:{
          show: false
        },
        title: {
          text: 'Dam List',
          offsetX: 15
        },
        subtitle: {
          text: '(Click on bar to see water level in details )',
          offsetX: 15
        },
        yaxis: {
          labels: {
            show: false
          }
        }
        };
      
        let chartDamList = new ApexCharts(document.querySelector("#chart-damList"), options);
        chartDamList.render();
      
        let optionsWeekly = {
          series: [{
          data: []
        }],
          chart: {
          id: 'barDays',
          height: 400,
          width: '100%',
          type: 'bar',
          stacked: true
        },
        plotOptions: {
          bar: {
            columnWidth: '70%',
            horizontal: false,
            dataLabels: {
                    position: 'top', // top, center, bottom
                  }
          }
        },
        legend: {
          show: false
        },
        grid: {
          yaxis: {
            lines: {
              show: false,
            }
          },
          xaxis: {
            lines: {
              show: true,
            }
          }
        },
        xaxis:{
          labels:{
              rotate: 270,
              rotateAlways: true,
            }
        },
        yaxis: {
          labels: {
            show: false
          }
        },
        title: {
          text: 'Weekly Water Level',
          offsetX: 10
        },
        tooltip: {
          x: {
            formatter: function (val, opts) {
              return opts.w.globals.seriesNames[opts.seriesIndex]
            }
          },
          y: {
            title: {
              formatter: function (val, opts) {
                return opts.w.globals.labels[opts.dataPointIndex]
              }
            }
          }
        }
        };
        let chartWeekly = new ApexCharts(document.querySelector("#chart-weekly"), optionsWeekly);
        chartWeekly.render();
        chart.addEventListener('dataPointSelection', function (e, chart, opts) {
        let weeklyChartEL = document.querySelector("#chart-weekly");
        let damListChartEL = document.querySelector("#chart-damList");
      
        if (opts.selectedDataPoints[0].length === 1) {
          if(weeklyChartEL.classList.contains("active")) {
            updateWeeklyChart(chart, 'barDays')
          }
          else {
            damListChartEL.classList.add("chart-weekly-activated")
            weeklyChartEL.classList.add("active");
            updateWeeklyChart(chart, 'barDays')
          }
        } else {
            updateWeeklyChart(chart, 'barDays')
        }
        if (opts.selectedDataPoints[0].length === 0) {
          damListChartEL.classList.remove("chart-weekly-activated")
          weeklyChartEL.classList.remove("active");
        }
      })
      chart.addEventListener('updated', function (chart) {
        updateWeeklyChart(chart, 'barDays')
      })
</script>
<!-- FRLMWL Chart -->


<script>
    let frlData = [];
    let mwlData = [];
    
    let i,j;
    '<%for(i = 0;i<FRLdata.length;i++){%>'
    frlData.push(parseFloat(['<%=FRLdata[i]%>']))
    '<%}%>'
    
    '<%for(j = 0;j<MWLdata.length;j++){%>'
    mwlData.push(parseFloat(['<%=MWLdata[j]%>']))
    '<%}%>'
    
    // console.log(alldata)
    // console.table(alldata)
    // console.table(alldata[0][1])
    
    
     let FRLMWLoptions = {
              series: [{
              name: 'FLR',
              data: frlData
            }, {
              name: 'MWL',
              data: mwlData
            }],
              chart: {
              type: 'area',
              height: 500,
              background:'#f4f4f4',
              foreColor : '#333', 
              // width:500,
              stacked: true,
              // stackType: '100%'
            },
            plotOptions: {
              bar: {
                horizontal: false,
                columnWidth: '55%',
                endingShape: 'rounded'
              },
            },
            dataLabels: {
              enabled: false
            },
            stroke: {
              show: true,
              width: 2,
              colors: ['transparent']
            },
            title: {
              text: 'FRL & MWL Level',
              // align: 'left',
              // offsetX: 110
          },
            responsive: [{
              breakpoint: 480,
              options: {
                // legend: {
                //   position: 'top',
                //   offsetX: -10,
                //   offsetY: 0
                // }
              }
            }],
            xaxis: {
              categories: ['Chimoni','Chulliyar','Kallada','Kanjirapuzha','Karapuzha','Kuttiady','Malampuzha','Malankara','Mangalam',
              'Meenkara','Neyyar','Pamba','Pazhassi','Peechi',
              'Periyar','Pothundy','Siruvani','Vazhani','Walayar'
              ],
              labels:{
                rotate: 270,
                rotateAlways: true,
              }
            },
            yaxis: {
                // tickAmount: 50,
            //   min: 0,
            //   max: 1000,
            forceNiceScale: true,
            
              title: {
                text: '(m)'
              },
              axisBorder: {
              show: true,
              color: '#78909C',
              offsetX: 0,
              offsetY: 0
          },
            },
            fill: {
              opacity: 1
            },
            legend: {
              position: 'right',
              offsetX: 0,
              offsetY: 50
            },
            tooltip: {
              y: {
                formatter: function (val) {
                  return  val + "(m)"
                }
              }
            }
            };
    
            let FRLMWLchart = new ApexCharts(document.querySelector("#FRLMWLchart"), FRLMWLoptions);
            FRLMWLchart.render();
    </script>
  
</body>
</html>